[0.08 - 2.72] today i&#39;m going to teach you the
[0.96 - 4.40] solidity programming language in less
[2.72 - 6.64] than 20 minutes so that you can become a
[4.40 - 8.32] blockchain master in no time so you
[6.64 - 9.68] might be thinking like how is that even
[8.32 - 11.36] possible well today i&#39;m going to give
[9.68 - 12.56] you a really fast-paced introduction to
[11.36 - 13.76] the really important parts of the
[12.56 - 15.44] solidity programming language you&#39;re
[13.76 - 16.48] going to use over and over again and if
[15.44 - 18.32] you learn all these you&#39;re going to get
[16.48 - 20.08] up to speed really quickly and even if
[18.32 - 20.96] you know solidity already i guarantee
[20.08 - 22.56] you&#39;re going to learn something out of
[20.96 - 23.76] this video so trust me you&#39;re not going
[22.56 - 25.20] to want to miss this you&#39;re going to
[23.76 - 26.88] save this video bookmark it and
[25.20 - 28.16] reference it over and over again while
[26.88 - 29.52] you&#39;re learning the programming language
[28.16 - 31.04] so before we get started you know i put
[29.52 - 33.04] a lot of effort into making this short
[31.04 - 34.48] video just for you and the only thing i
[33.04 - 36.16] ask in return is that you like this
[34.48 - 37.92] video that really helps youtube know
[36.16 - 39.84] that you got value out of it and shows
[37.92 - 41.60] to more people also subscribe to this
[39.84 - 42.88] channel and share with your friends so
[41.60 - 44.16] if you&#39;re new around here hey i&#39;m
[42.88 - 46.00] gregory and on this channel i turn you
[44.16 - 47.44] into a blockchain master and so if you
[46.00 - 48.80] get a lot of value in this video and you
[47.44 - 51.12] want to learn real world blockchain
[48.80 - 52.40] skills land your first web 3.0 job then
[51.12 - 53.92] i can show you how to do that over at
[52.40 - 55.20] that university dot com forward slash
[53.92 - 59.00] boot camp all right so with all out of
[55.20 - 59.00] the way let&#39;s get started
[59.76 - 63.12] alright so let&#39;s start with the basics
[61.20 - 64.80] so what even is solidity in the first
[63.12 - 66.40] place so it&#39;s an object-oriented
[64.80 - 68.80] high-level language for implementing
[66.40 - 70.48] smart contracts so what are smart
[68.80 - 72.40] contracts they&#39;re the building blocks of
[70.48 - 74.00] blockchain-based applications so they&#39;re
[72.40 - 75.52] called smart contracts because they
[74.00 - 77.12] represent digital agreements and the
[75.52 - 78.40] code cannot change and that&#39;s a feature
[77.12 - 80.08] of the solidity programming language
[78.40 - 82.08] once it&#39;s put on the blockchain so you
[80.08 - 83.52] can see the example of a web 2.0
[82.08 - 85.68] application where you have a browser and
[83.52 - 87.68] a website that talks to a server backend
[85.68 - 90.32] like a database that may be a server
[87.68 - 91.84] written in python or php and you have a
[90.32 - 93.76] blockchain based application here where
[91.84 - 95.68] you have a browser that connects to a
[93.76 - 97.60] blockchain directly and all the code for
[95.68 - 99.04] that application is written in solidity
[97.60 - 101.20] with the smart contracts deployed to the
[99.04 - 103.60] blockchain so the most common use cases
[101.20 - 104.80] for solidity smart contracts are tokens
[103.60 - 105.84] so that&#39;s one of the beauty of smart
[104.80 - 107.28] contracts you can create a
[105.84 - 110.00] cryptocurrency without creating a brand
[107.28 - 111.84] new blockchain for nfts which are
[110.00 - 113.44] non-fungible tokens which represent in
[111.84 - 114.72] most cases digital collectibles although
[113.44 - 117.20] there are many other things you can do
[114.72 - 119.76] with nfts and then also decentralize
[117.20 - 122.08] finance or defy with things like savings
[119.76 - 124.40] and lending yield farming trading and
[122.08 - 126.16] also flash loans so you can do all these
[124.40 - 128.08] things with solidity because they fully
[126.16 - 129.52] feature programming language or a turing
[128.08 - 131.20] complete programming language and it&#39;s
[129.52 - 132.56] relatively beginner friendly so let&#39;s
[131.20 - 134.24] dive into the features of the language
[132.56 - 136.00] that you see how that works so you can
[134.24 - 137.04] write solidity smart contracts directly
[136.00 - 138.64] in your web browser if you go to
[137.04 - 140.00] remix.ethereum.org
[138.64 - 141.60] you can write all the source code here
[140.00 - 143.44] you can compile them also deploy them to
[141.60 - 145.60] blockchain so i&#39;ve got a simple smart
[143.44 - 147.12] contract here called my contract okay so
[145.60 - 148.40] this is how you create an ethereum smart
[147.12 - 149.44] contract in the first place you start
[148.40 - 152.16] off with the solidity programming
[149.44 - 153.84] language version 0.8.0 and then you give
[152.16 - 155.52] it the contract keyword followed by the
[153.84 - 157.20] arbitrary name of your contract in this
[155.52 - 159.36] case my contract and you put all your
[157.20 - 160.56] code inside these curly braces here so
[159.36 - 161.68] let&#39;s start off with the basic features
[160.56 - 163.68] of the programming language like the
[161.68 - 165.68] data types and variables and functions
[163.68 - 167.12] so in terms of data types solidity is a
[165.68 - 169.04] statically typed language which means
[167.12 - 170.32] you have to declare the type anytime
[169.04 - 172.00] you&#39;re declaring a variable and that
[170.32 - 173.92] type should not change and so you can
[172.00 - 175.76] see that here like we say string because
[173.92 - 177.28] this is a data type string and this is a
[175.76 - 178.80] variable called my string which we
[177.28 - 180.40] assign here and this is a special
[178.80 - 182.08] variable called a state variable that
[180.40 - 183.60] means this value is actually written to
[182.08 - 185.52] the blockchain so when we put the smart
[183.60 - 186.80] contract on the blockchain we can call
[185.52 - 188.56] it public which is the variable
[186.80 - 190.08] visibility and solidity will give us a
[188.56 - 192.08] function where we can read the value of
[190.08 - 193.68] this outside the smart contract and you
[192.08 - 196.96] can see some of the other common types
[193.68 - 199.60] here like booleans and unsigned integers
[196.96 - 201.20] integers and also blockchain addresses
[199.60 - 202.96] and so these are some common types and
[201.20 - 204.80] examples of state variables so let&#39;s
[202.96 - 206.64] talk about local variables so in order
[204.80 - 208.80] to do that we have to also look at how
[206.64 - 210.40] functions work inside of solidity so you
[208.80 - 211.68] can see an example here solidity lets
[210.40 - 213.36] you create your own functions with
[211.68 - 215.92] arbitrary names we can see these are
[213.36 - 217.20] examples here like set name and get name
[215.92 - 219.28] and you can see that these functions
[217.20 - 220.96] take arguments like this string memory
[219.28 - 223.04] name okay this just sets the state
[220.96 - 224.24] variable here of example one so if i
[223.04 - 225.84] were to call this function i could
[224.24 - 228.00] update the value of this state variable
[225.84 - 229.76] name so in this case this name right
[228.00 - 231.20] here is a local variable that&#39;s only
[229.76 - 232.88] accessible inside this function and this
[231.20 - 234.80] is a state variable which is accessible
[232.88 - 237.12] outside the smart contract if we call it
[234.80 - 238.72] public okay or you can do get name here
[237.12 - 240.80] and it&#39;s also available everywhere else
[238.72 - 242.64] inside the smart contract so in solidity
[240.80 - 244.48] there are two main types of functions
[242.64 - 246.00] write functions and then also read
[244.48 - 247.28] functions so whenever you&#39;re writing
[246.00 - 248.88] your information to the blockchain you
[247.28 - 250.24] have to pay a gas fee so you&#39;ll pay some
[248.88 - 251.68] cryptocurrency fee whatever you call
[250.24 - 252.80] this function whenever you read
[251.68 - 254.96] information for the blockchain it&#39;s
[252.80 - 256.80] completely free and doesn&#39;t cost any gas
[254.96 - 258.64] so just like variables functions also
[256.80 - 259.84] have visibility so you can see example
[258.64 - 261.60] this function is public so it&#39;s
[259.84 - 263.84] accessible outside the smart contract
[261.60 - 266.16] and if i were to reset this function to
[263.84 - 268.16] internal it would be only accessible
[266.16 - 269.20] inside the smart contract and here&#39;s an
[268.16 - 270.96] example of all the different
[269.20 - 272.96] visibilities you can apply to a variable
[270.96 - 274.64] so a name a variable is no visibility
[272.96 - 276.08] available private visibility which means
[274.64 - 278.00] it&#39;s only accessible inside the smart
[276.08 - 278.80] contract an internal variable which is
[278.00 - 280.32] also
[278.80 - 282.40] accessible inside the smart contract but
[280.32 - 284.56] can be inherited and then public which
[282.40 - 286.64] can be called inside outside and also
[284.56 - 288.48] inherited and for functions you can see
[286.64 - 289.76] that like this here is a public function
[288.48 - 291.76] it can be called outside the smart
[289.76 - 294.08] contract it can also be called by
[291.76 - 295.52] another function a private function
[294.08 - 297.12] which cannot be called outside the smart
[295.52 - 298.96] contract but can be called inside of
[297.12 - 300.56] another functions of the same contract
[298.96 - 302.32] an external function which can only be
[300.56 - 303.84] called outside the smart contract and an
[302.32 - 305.68] internal function which can only be
[303.84 - 307.68] called inside the same smart contract
[305.68 - 309.52] like this from another function so
[307.68 - 312.48] functions also have built-in modifiers
[309.52 - 314.64] and solidity like view for example this
[312.48 - 316.32] means that the contract does not modify
[314.64 - 318.24] the state of the blockchain but it can
[316.32 - 320.96] read the state like read the state
[318.24 - 323.04] variable value name for example pure
[320.96 - 324.64] functions which do not modify the state
[323.04 - 326.64] and also cannot read the states they
[324.64 - 328.48] cannot read name for example and then
[326.64 - 331.12] also payable functions which are allowed
[328.48 - 332.64] to receive ether cryptocurrency whenever
[331.12 - 334.08] the transaction is submitted and
[332.64 - 335.92] solidity also lets you create your own
[334.08 - 337.60] custom modifiers which can be applied to
[335.92 - 339.92] functions so here&#39;s an example you could
[337.60 - 341.44] do modifier only owner this restricts
[339.92 - 343.28] who can call a specific function this
[341.44 - 344.64] requires the message sender the person
[343.28 - 346.16] who&#39;s calling the function is the owner
[344.64 - 347.36] of the contract so you create it like
[346.16 - 349.20] this and then you apply it to your
[347.36 - 350.08] function like this so there&#39;s one more
[349.20 - 351.76] function you should know about in
[350.08 - 353.60] solidity it&#39;s a special function called
[351.76 - 355.68] the constructor function which you can
[353.60 - 357.44] see this keyword here this is a function
[355.68 - 359.28] that&#39;s run once and only once whenever
[357.44 - 361.36] the contract is initialized or put on
[359.28 - 362.88] the blockchain so it accepts arguments
[361.36 - 364.56] just like other functions you can make
[362.88 - 366.16] it payable you can send ether and works
[364.56 - 368.08] pretty much like everything else except
[366.16 - 369.28] you can only call it once likewise
[368.08 - 370.88] there&#39;s a few more variables you should
[369.28 - 372.48] know about in solidity these are global
[370.88 - 374.64] variables which are available inside of
[372.48 - 376.32] any smart contract so some examples are
[374.64 - 377.68] this which corresponds to the address of
[376.32 - 379.04] the current smart contract that you&#39;re
[377.68 - 380.72] coding against
[379.04 - 383.28] message which has a few more values
[380.72 - 385.84] attached to it like sender which is the
[383.28 - 387.20] person calling the function uh tx which
[385.84 - 389.20] is the transaction you can get the
[387.20 - 390.72] origin of that transaction uh
[389.20 - 391.84] message.value which is the amount of
[390.72 - 394.48] cryptocurrency same with that
[391.84 - 395.92] transaction we also have block which is
[394.48 - 397.68] the current block on the chain you can
[395.92 - 399.92] get the number you get the time stamp
[397.68 - 400.88] the chain id and many other values as
[399.92 - 402.56] well
[400.88 - 403.92] so now let&#39;s talk about operators so a
[402.56 - 405.76] lot of times you&#39;re doing math inside of
[403.92 - 407.52] solidity with value types and you&#39;re
[405.76 - 409.04] comparing those types or you&#39;re adding
[407.52 - 410.48] those types together doing some math in
[409.04 - 413.36] some way so you can see it supports
[410.48 - 416.32] basic math like plus minus multiply
[413.36 - 418.08] divide exponents modulus increment
[416.32 - 419.36] decrement and here&#39;s an example of a
[418.08 - 420.96] bunch of different math operations all
[419.36 - 423.76] in one you can also check that things
[420.96 - 425.52] are equal not equal greater than less
[423.76 - 427.44] than greater than or equal to less than
[425.52 - 428.88] or equal to this applies for other types
[427.44 - 430.08] not just numbers
[428.88 - 432.16] and you have all the other standard
[430.08 - 434.00] logical operators like and making sure
[432.16 - 436.08] that both things are true or that either
[434.00 - 438.00] one of these is true or not to check
[436.08 - 439.68] something is not true and you can use
[438.00 - 441.44] these operators most commonly inside of
[439.68 - 442.96] conditionals to create if else
[441.44 - 445.20] statements so you can see example like
[442.96 - 447.92] this if this is true then return this
[445.20 - 450.00] else return this okay
[447.92 - 451.60] you can see it like this if something is
[450.00 - 453.20] true return this and then you know you
[451.60 - 455.52] don&#39;t have an else condition here and
[453.20 - 457.04] you can also express this with a ternary
[455.52 - 458.88] expression like this
[457.04 - 461.20] so solidity supports arrays which are
[458.88 - 462.88] just sorted lists of information you can
[461.20 - 465.12] declare an array like this by giving it
[462.88 - 467.04] the data type okay and then you can you
[465.12 - 469.28] know declare it in line just like this
[467.04 - 471.20] you can also initialize an array without
[469.28 - 472.64] a specific size you can initialize it
[471.20 - 474.72] with a specific size like this is an
[472.64 - 476.48] example of an unsigned integer array
[474.72 - 477.92] with 10 zeros you&#39;re starting out you
[476.48 - 479.92] can see an array of strings just like
[477.92 - 481.52] this and you can also do things like
[479.92 - 482.96] read from arrays and manipulate them
[481.52 - 484.64] from inside of functions with the normal
[482.96 - 486.16] functions like reading just like this
[484.64 - 488.08] this just gets the value out of a given
[486.16 - 489.52] index there&#39;s your base index just like
[488.08 - 491.36] most other programming languages you can
[489.52 - 493.36] get the length of an array like this you
[491.36 - 495.60] can add a new item to the end lift push
[493.36 - 497.52] like this you can get the last element
[495.60 - 499.92] remove it with pop and then you can also
[497.52 - 501.92] delete an element at a specific index
[499.92 - 503.36] like this so one of the most common ways
[501.92 - 505.44] to store information inside smart
[503.36 - 506.88] contracts is with mappings so these are
[505.44 - 508.96] key value pairs that work like
[506.88 - 510.16] associative arrays or hash tables and
[508.96 - 512.56] other programming languages where you
[510.16 - 514.32] have a key with a corresponding value so
[512.56 - 515.92] in this case you have a mapping declared
[514.32 - 517.36] with the mapping keyword okay you give
[515.92 - 519.28] it a key which in this case is an
[517.36 - 521.60] unsigned integer and a string which
[519.28 - 523.20] corresponds to the value so in this case
[521.60 - 525.36] this might be a mapping of names where
[523.20 - 526.48] you have a uint like an id and a string
[525.36 - 528.40] that corresponds to the name that you
[526.48 - 530.48] want to store here so you can also see a
[528.40 - 531.92] mapping of addresses just like
[530.48 - 532.80] blockchain addresses this is pretty
[531.92 - 535.04] common
[532.80 - 536.88] balances where you have an address
[535.04 - 538.32] corresponding to a number of maybe
[536.88 - 541.12] cryptocurrency that&#39;s held in the smart
[538.32 - 542.56] contract an address with a boolean for
[541.12 - 544.48] to see if someone might have voted or
[542.56 - 546.56] taken a specific action you can also do
[544.48 - 548.56] nested mappings where you give it an
[546.56 - 550.16] address that corresponds to another
[548.56 - 552.24] mapping within this mapping which might
[550.16 - 553.92] be uh you know a boolean value on
[552.24 - 556.08] whether a user has taken a specific
[553.92 - 558.08] action based on a un value
[556.08 - 560.24] and then you can access and manipulate
[558.08 - 562.16] mappings inside and outside the smart
[560.24 - 564.00] contract like this so public will give
[562.16 - 565.76] you a reader function where you can
[564.00 - 568.08] fetch a value from a mapping by passing
[565.76 - 569.36] in a key as the id okay you can see an
[568.08 - 571.44] example of a mapping read inside of a
[569.36 - 574.40] function like this simply by passing in
[571.44 - 576.40] the value for the of the uh the key and
[574.40 - 577.84] then setting the value by passing in the
[576.40 - 580.00] key and then assigning a new value like
[577.84 - 581.68] this and then also removing an item from
[580.00 - 583.12] the mapping by passing in the id and
[581.68 - 584.64] then calling delete
[583.12 - 586.64] so solidity lets you create your own
[584.64 - 588.08] types with something called a struct so
[586.64 - 589.84] you can create a struct like this and
[588.08 - 591.36] give it a name this example of a book
[589.84 - 593.36] struck i&#39;ve just created this out of
[591.36 - 595.20] thin air so i created a book struct with
[593.36 - 597.60] a capital b and i&#39;ve given it several
[595.20 - 599.68] attributes like a string title string
[597.60 - 601.36] author and the string completed whether
[599.68 - 602.72] i&#39;ve read the book or not
[601.36 - 604.40] and then here i can use that struct
[602.72 - 606.40] inside an application like this here&#39;s
[604.40 - 607.92] an array of books in my collection okay
[606.40 - 609.92] i can add a new book to the collection
[607.92 - 612.16] like this i can create a new book like
[609.92 - 613.60] this saying book then passing in title
[612.16 - 615.12] author and saying false that i haven&#39;t
[613.60 - 617.52] read it yet i can push it to the array
[615.12 - 620.08] just like this and then i can get the uh
[617.52 - 622.16] book from the array like this i just get
[620.08 - 623.20] book storage book and then i return the
[622.16 - 625.12] attributes of the book from this
[623.20 - 627.28] function and i can also mark that book
[625.12 - 629.28] as completed in my collection with this
[627.28 - 631.44] complete function i read it from storage
[629.28 - 632.88] and then i fetch the book like this and
[631.44 - 634.56] then i just mark it as completed and
[632.88 - 635.60] that will automatically update it so
[634.56 - 636.64] another feature of the solidity
[635.60 - 639.28] programming language you should know
[636.64 - 641.60] about are events so what are they well
[639.28 - 643.36] solidity lets you subscribe to events
[641.60 - 645.28] from an external consumer to find out
[643.36 - 647.60] anytime a function or something inside
[645.28 - 649.44] of a function has been called so in this
[647.60 - 651.60] case we have an event here that i&#39;ve
[649.44 - 652.96] created called message updated all right
[651.60 - 655.36] this has some different
[652.96 - 656.80] arguments or attributes i should say
[655.36 - 658.40] the user who called the function and
[656.80 - 660.40] also the message so you can see that
[658.40 - 662.48] here the update message it just takes a
[660.40 - 664.40] message and then it updates the message
[662.48 - 666.32] inside the smart contract and it emits
[664.40 - 668.00] the event so you trigger events like
[666.32 - 670.48] this with the emit keyword and then you
[668.00 - 671.60] pass in the values which you specified
[670.48 - 673.12] here
[671.60 - 674.64] and so anytime that this function is
[673.12 - 676.24] called there will be a record of it on
[674.64 - 678.80] the blockchain that i can go back and
[676.24 - 680.40] look at later very easily and by finding
[678.80 - 682.08] this event so i can also get a
[680.40 - 683.44] notification anytime this function is
[682.08 - 685.44] called in real time because i can
[683.44 - 686.80] subscribe to this event externally and
[685.44 - 688.88] maybe get a push notification or
[686.80 - 691.20] something like that so i can also get an
[688.88 - 693.28] entire history of every single time this
[691.20 - 695.28] uh message has been emitted and that&#39;s
[693.28 - 697.36] another useful use case for events as
[695.28 - 699.44] well so i should also note that these
[697.36 - 702.24] you know attributes inside the event can
[699.44 - 704.56] be any data type that you want to and
[702.24 - 707.20] you can have up to 17 of these and you
[704.56 - 708.80] can also index up to three of these so
[707.20 - 711.12] what does that mean index well in this
[708.80 - 713.12] case we can see indexed user so that
[711.12 - 715.28] means that i can filter through events
[713.12 - 716.96] or subscribe to events that only pertain
[715.28 - 718.32] to this particular user so instead of
[716.96 - 720.56] getting a push notification every single
[718.32 - 722.16] time an event is called i can filter out
[720.56 - 724.08] events that are only called with a
[722.16 - 725.12] specific address in this case so another
[724.08 - 726.64] thing you should know about inside
[725.12 - 728.48] solidity is working with the native
[726.64 - 730.00] cryptocurrency of ethereum blockchain
[728.48 - 731.52] ether so you can see different
[730.00 - 733.68] expressions of ether coded out in the
[731.52 - 736.16] smart contract right here so ether is
[733.68 - 738.40] divisible by 18 decimal places so just
[736.16 - 740.96] like the us dollar is divisible by two
[738.40 - 742.64] decimal places ether has 18 zeros after
[740.96 - 744.96] the decimal place so the smallest unit
[742.64 - 747.04] here is whey another common value is
[744.96 - 748.32] gray which is used to pay for gas most
[747.04 - 749.92] commonly so you can see those in the
[748.32 - 752.00] contract you can see shortcuts for this
[749.92 - 754.00] one way is equal to one
[752.00 - 756.00] one gray is equal to this much and one
[754.00 - 758.24] ether is equal to one followed by 18
[756.00 - 759.84] decimal places you can receive ether
[758.24 - 761.68] directly to a smart contract with the
[759.84 - 763.20] receive function if you call it external
[761.68 - 764.88] and payable you can also use the
[763.20 - 768.00] fallback function if no receive function
[764.88 - 770.72] is implemented and if msg or message
[768.00 - 772.24] data is not present and inside both of
[770.72 - 773.76] these functions you can also
[772.24 - 775.04] implement any type of arbitrary business
[773.76 - 777.20] logic that you want so you can see an
[775.04 - 779.04] example of here as a line that up
[777.20 - 780.72] updates this count by one you can check
[779.04 - 782.48] the balance of any address inside of a
[780.72 - 784.40] smart contract just like this in this
[782.48 - 785.84] case i&#39;m checking the contract balance
[784.40 - 787.92] address this than just calling dot
[785.84 - 789.76] balance and you can also send ether to a
[787.92 - 791.36] different address just like this with
[789.76 - 793.36] call now there are other ways to do this
[791.36 - 794.56] but this is my preferred way because you
[793.36 - 796.00] can check for the success of this
[794.56 - 797.92] message and you can add a require
[796.00 - 799.36] statement just like this and the last
[797.92 - 801.68] thing i&#39;ll say about ether instead of
[799.36 - 803.68] smart contracts is that any function can
[801.68 - 805.68] receive ether whenever the transaction
[803.68 - 807.68] is sent as long as you use the payable
[805.68 - 809.28] modifier built into solidity and then
[807.68 - 811.20] you can access this value inside the
[809.28 - 816.00] function with message.value and then
[811.20 - 817.44] also the sender with message dot sender
[816.00 - 818.80] and so speaking of this require
[817.44 - 820.64] statement right here i&#39;ll make a quick
[818.80 - 823.68] note on error handling inside of
[820.64 - 825.04] solidity so we&#39;ll see two examples here
[823.68 - 826.48] the most common way is to use this
[825.04 - 828.16] require statement so this is a
[826.48 - 830.08] essentially a function inside solidity
[828.16 - 832.24] that checks for the value is true or
[830.08 - 834.16] false so you can see here examples just
[832.24 - 835.68] seeing if a value is greater than 10 if
[834.16 - 838.00] the value is greater than 10 then this
[835.68 - 839.68] function will succeed and you&#39;ll see
[838.00 - 842.80] you know everything after this function
[839.68 - 844.48] continue if this value is less than 10
[842.80 - 846.00] then this function will stop execution
[844.48 - 848.56] and this error message will be raised
[846.00 - 850.56] okay another common uh function is the
[848.56 - 852.00] revert function okay as you can see uh
[850.56 - 853.12] value&#39;s less than or equal to 10 then
[852.00 - 855.12] revert
[853.12 - 856.80] and then you know if it&#39;s okay then
[855.12 - 858.80] continue on execution with the function
[856.80 - 860.64] as well so both these two will get you
[858.80 - 862.24] really far you can also define your own
[860.64 - 864.00] custom errors and use things like assert
[862.24 - 865.12] but these will get you started
[864.00 - 867.44] so another thing you should know about
[865.12 - 869.52] is that solidity supports inheritance so
[867.44 - 871.12] you can create smart contracts that
[869.52 - 872.72] inherit behavior from other smart
[871.12 - 874.56] contracts so in this case you can see my
[872.72 - 876.72] contract inherits from this other
[874.56 - 878.56] contract called ownable you see contract
[876.72 - 880.00] ownable this basically encapsulates all
[878.56 - 881.76] the behavior of a contract that
[880.00 - 882.88] restricts function calls to the person
[881.76 - 884.80] who deployed the contract to the
[882.88 - 886.08] blockchain or in this case the owner so
[884.80 - 887.76] inside the constructor we set the owner
[886.08 - 889.44] as message sender we stored as a state
[887.76 - 891.12] variable here we create a custom
[889.44 - 892.64] modifier that says only the owner can
[891.12 - 894.88] call a specific function in which this
[892.64 - 896.48] modifier is applied to so we can inherit
[894.88 - 898.72] that all that behaviors have our smart
[896.48 - 900.72] contract with one line we can say my
[898.72 - 902.16] contract is ownable so you can either
[900.72 - 903.52] import this from a different file or you
[902.16 - 905.36] can just have it in view in the same
[903.52 - 907.12] file okay and then here you can see we
[905.36 - 910.16] have this uh ownable modifier that we
[907.12 - 912.48] can apply to uh this set name function
[910.16 - 913.76] and also note that the constructor right
[912.48 - 915.76] here is going to automatically be
[913.76 - 917.28] inherited from this contract when we put
[915.76 - 918.00] on the blockchain all right so the final
[917.28 - 919.84] thing you should know about with
[918.00 - 922.16] solidity is how to talk to other smart
[919.84 - 923.28] contracts within a smart contract so
[922.16 - 924.96] i&#39;ll show you an example of that there&#39;s
[923.28 - 926.48] a few different ways we can see this
[924.96 - 928.40] contract here is a secret vault which
[926.48 - 930.08] basically just stores a secret on chain
[928.40 - 931.52] you can set the secret and also get the
[930.08 - 933.12] secret so we&#39;ll see how to interact that
[931.52 - 935.12] in a different contract so you can see
[933.12 - 937.04] my contract uh inside the constructor
[935.12 - 938.32] what we do is take the address for the
[937.04 - 940.96] other contract that&#39;s deployed to the
[938.32 - 942.80] blockchain and then we create uh we save
[940.96 - 944.48] it here so we actually have a type
[942.80 - 946.48] called secret vault which is the same
[944.48 - 948.00] name as this contract here it saves it
[946.48 - 949.76] as a state variable so we can access and
[948.00 - 951.36] call its functions later so you can see
[949.76 - 953.36] an example of setting the secret
[951.36 - 954.88] basically we just say secret vault uh
[953.36 - 957.12] this is the contract that&#39;s saved here
[954.88 - 959.44] and we call set secret okay inside this
[957.12 - 960.56] function and we just pass in whatever uh
[959.44 - 962.24] you know argument we need for that
[960.56 - 964.64] function we can also get the secret like
[962.24 - 965.92] this to say secret vault uh return you
[964.64 - 967.04] know get secret it&#39;s pretty straight
[965.92 - 968.48] forward
[967.04 - 970.72] another common way to talk to other
[968.48 - 971.84] smart contracts is to use interfaces so
[970.72 - 973.44] this is where you don&#39;t need the
[971.84 - 975.04] complete code of another smart contract
[973.44 - 977.92] on chain so in this case let&#39;s say an
[975.04 - 979.28] erc20 token this is a common uh
[977.92 - 981.20] cryptocurrency standard on the
[979.28 - 982.56] blockchain so all you have to know is
[981.20 - 984.00] the specific functions that you want to
[982.56 - 985.84] call so in this case we&#39;re going to call
[984.00 - 987.52] the transfer from function the erc20
[985.84 - 990.16] token which you can create an interface
[987.52 - 991.68] for it with the interface keyword ierc20
[990.16 - 993.28] and then just give it a description for
[991.68 - 994.80] how the transfer from function works and
[993.28 - 996.72] then we can use that inside of our smart
[994.80 - 998.40] contract like this we have a deposit
[996.72 - 1000.64] function which basically takes the token
[998.40 - 1002.96] address and the amount and then we we
[1000.64 - 1004.00] say ie rc20 then we pass in the token
[1002.96 - 1005.44] address and then we can call any
[1004.00 - 1007.84] function we want to on that smart
[1005.44 - 1009.12] contract from this right here
[1007.84 - 1010.88] we can also say this to a variable if we
[1009.12 - 1012.64] want to but we&#39;ll just do it in one
[1010.88 - 1014.00] liner okay and then call transfer from
[1012.64 - 1015.44] and then pass them whatever values we
[1014.00 - 1017.12] want to like the message sender who&#39;s
[1015.44 - 1018.72] calling this function the address of the
[1017.12 - 1020.72] contract who might own these tokens and
[1018.72 - 1022.64] also the amount which is passed in from
[1020.72 - 1024.08] the uh function argument here all right
[1022.64 - 1026.08] so that&#39;s an overview of the solidity
[1024.08 - 1027.76] programming language in less than 20
[1026.08 - 1029.12] minutes so these are the most important
[1027.76 - 1030.88] aspects of the programming language that
[1029.12 - 1032.16] you&#39;re going to see over and over again
[1030.88 - 1033.76] and if you understand these you&#39;re going
[1032.16 - 1035.12] to be up to speed really quickly and on
[1033.76 - 1037.52] your way to becoming a real world
[1035.12 - 1039.68] blockchain master so again i put a lot
[1037.52 - 1041.04] of time into making this video for you
[1039.68 - 1042.48] so if you got value out of this make
[1041.04 - 1043.92] sure you smash that like button down
[1042.48 - 1045.84] below for the youtube algorithm that
[1043.92 - 1047.52] really does help youtube show this video
[1045.84 - 1049.12] to more people make sure you subscribe
[1047.52 - 1050.80] to the channel and if you like this
[1049.12 - 1052.16] video you did get value out of it you
[1050.80 - 1053.84] went to the next step and master real
[1052.16 - 1055.60] world blockchain skills i could show you
[1053.84 - 1057.04] that step-by-step finish over at dap
[1055.60 - 1058.64] university dot com forward slash boot
[1057.04 - 1059.84] camp you really want to be an expert get
[1058.64 - 1061.76] started today i&#39;ve helped people with
[1059.84 - 1063.60] zero coding experience you know breaking
[1061.76 - 1065.44] the blockchain industry land their first
[1063.60 - 1066.88] blockchain job in a matter of months so
[1065.44 - 1070.24] that&#39;s all i&#39;ve got until next time
[1066.88 - 1070.24] thanks for watching dap university